# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_QCN', [dirname(__file__)])
        except ImportError:
            import _QCN
            return _QCN
        if fp is not None:
            try:
                _mod = imp.load_module('_QCN', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _QCN = swig_import_helper()
    del swig_import_helper
else:
    import _QCN
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Crust2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crust2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Crust2, name)
    __repr__ = _swig_repr
    CRUST_KEY = _QCN.Crust2_CRUST_KEY
    CRUST_MAP = _QCN.Crust2_CRUST_MAP
    CRUST_ELEV = _QCN.Crust2_CRUST_ELEV
    def __init__(self): 
        this = _QCN.new_Crust2()
        try: self.this.append(this)
        except: self.this = this
    def load(self): return _QCN.Crust2_load(self)
    def getMeanVel(self, *args): return _QCN.Crust2_getMeanVel(self, *args)
    __swig_destroy__ = _QCN.delete_Crust2
    __del__ = lambda self : None;
Crust2_swigregister = _QCN.Crust2_swigregister
Crust2_swigregister(Crust2)

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _QCN.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QCN.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _QCN.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _QCN.doubleArray___setitem__(self, *args)
    def cast(self): return _QCN.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _QCN.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_QCN.doubleArray_frompointer)
doubleArray_swigregister = _QCN.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _QCN.doubleArray_frompointer(*args)
doubleArray_frompointer = _QCN.doubleArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _QCN.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QCN.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _QCN.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _QCN.floatArray___setitem__(self, *args)
    def cast(self): return _QCN.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _QCN.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_QCN.floatArray_frompointer)
floatArray_swigregister = _QCN.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _QCN.floatArray_frompointer(*args)
floatArray_frompointer = _QCN.floatArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _QCN.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QCN.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _QCN.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _QCN.intArray___setitem__(self, *args)
    def cast(self): return _QCN.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _QCN.intArray_frompointer
    if _newclass:frompointer = staticmethod(_QCN.intArray_frompointer)
intArray_swigregister = _QCN.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _QCN.intArray_frompointer(*args)
intArray_frompointer = _QCN.intArray_frompointer

class QCNTrigger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCNTrigger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QCNTrigger, name)
    __repr__ = _swig_repr
    P = _QCN.QCNTrigger_P
    S = _QCN.QCNTrigger_S
    def __init__(self): 
        this = _QCN.new_QCNTrigger()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QCN.delete_QCNTrigger
    __del__ = lambda self : None;
    def copyFromUSBTrigger(self, *args): return _QCN.QCNTrigger_copyFromUSBTrigger(self, *args)
    def _print(self): return _QCN.QCNTrigger__print(self)
    def setMagnitude(self): return _QCN.QCNTrigger_setMagnitude(self)
    N_SHORT = _QCN.QCNTrigger_N_SHORT
    __swig_setmethods__["qcn_quakeid"] = _QCN.QCNTrigger_qcn_quakeid_set
    __swig_getmethods__["qcn_quakeid"] = _QCN.QCNTrigger_qcn_quakeid_get
    if _newclass:qcn_quakeid = _swig_property(_QCN.QCNTrigger_qcn_quakeid_get, _QCN.QCNTrigger_qcn_quakeid_set)
    __swig_setmethods__["posted"] = _QCN.QCNTrigger_posted_set
    __swig_getmethods__["posted"] = _QCN.QCNTrigger_posted_get
    if _newclass:posted = _swig_property(_QCN.QCNTrigger_posted_get, _QCN.QCNTrigger_posted_set)
    __swig_setmethods__["hostid"] = _QCN.QCNTrigger_hostid_set
    __swig_getmethods__["hostid"] = _QCN.QCNTrigger_hostid_get
    if _newclass:hostid = _swig_property(_QCN.QCNTrigger_hostid_get, _QCN.QCNTrigger_hostid_set)
    __swig_setmethods__["triggerid"] = _QCN.QCNTrigger_triggerid_set
    __swig_getmethods__["triggerid"] = _QCN.QCNTrigger_triggerid_get
    if _newclass:triggerid = _swig_property(_QCN.QCNTrigger_triggerid_get, _QCN.QCNTrigger_triggerid_set)
    __swig_setmethods__["db"] = _QCN.QCNTrigger_db_set
    __swig_getmethods__["db"] = _QCN.QCNTrigger_db_get
    if _newclass:db = _swig_property(_QCN.QCNTrigger_db_get, _QCN.QCNTrigger_db_set)
    __swig_setmethods__["file"] = _QCN.QCNTrigger_file_set
    __swig_getmethods__["file"] = _QCN.QCNTrigger_file_get
    if _newclass:file = _swig_property(_QCN.QCNTrigger_file_get, _QCN.QCNTrigger_file_set)
    __swig_setmethods__["result_name"] = _QCN.QCNTrigger_result_name_set
    __swig_getmethods__["result_name"] = _QCN.QCNTrigger_result_name_get
    if _newclass:result_name = _swig_property(_QCN.QCNTrigger_result_name_get, _QCN.QCNTrigger_result_name_set)
    __swig_setmethods__["longitude"] = _QCN.QCNTrigger_longitude_set
    __swig_getmethods__["longitude"] = _QCN.QCNTrigger_longitude_get
    if _newclass:longitude = _swig_property(_QCN.QCNTrigger_longitude_get, _QCN.QCNTrigger_longitude_set)
    __swig_setmethods__["latitude"] = _QCN.QCNTrigger_latitude_set
    __swig_getmethods__["latitude"] = _QCN.QCNTrigger_latitude_get
    if _newclass:latitude = _swig_property(_QCN.QCNTrigger_latitude_get, _QCN.QCNTrigger_latitude_set)
    __swig_setmethods__["time_trigger"] = _QCN.QCNTrigger_time_trigger_set
    __swig_getmethods__["time_trigger"] = _QCN.QCNTrigger_time_trigger_get
    if _newclass:time_trigger = _swig_property(_QCN.QCNTrigger_time_trigger_get, _QCN.QCNTrigger_time_trigger_set)
    __swig_setmethods__["time_received"] = _QCN.QCNTrigger_time_received_set
    __swig_getmethods__["time_received"] = _QCN.QCNTrigger_time_received_get
    if _newclass:time_received = _swig_property(_QCN.QCNTrigger_time_received_get, _QCN.QCNTrigger_time_received_set)
    __swig_setmethods__["time_est"] = _QCN.QCNTrigger_time_est_set
    __swig_getmethods__["time_est"] = _QCN.QCNTrigger_time_est_get
    if _newclass:time_est = _swig_property(_QCN.QCNTrigger_time_est_get, _QCN.QCNTrigger_time_est_set)
    __swig_setmethods__["significance"] = _QCN.QCNTrigger_significance_set
    __swig_getmethods__["significance"] = _QCN.QCNTrigger_significance_get
    if _newclass:significance = _swig_property(_QCN.QCNTrigger_significance_get, _QCN.QCNTrigger_significance_set)
    __swig_setmethods__["magnitude"] = _QCN.QCNTrigger_magnitude_set
    __swig_getmethods__["magnitude"] = _QCN.QCNTrigger_magnitude_get
    if _newclass:magnitude = _swig_property(_QCN.QCNTrigger_magnitude_get, _QCN.QCNTrigger_magnitude_set)
    __swig_setmethods__["pgah"] = _QCN.QCNTrigger_pgah_set
    __swig_getmethods__["pgah"] = _QCN.QCNTrigger_pgah_get
    if _newclass:pgah = _swig_property(_QCN.QCNTrigger_pgah_get, _QCN.QCNTrigger_pgah_set)
    __swig_setmethods__["pgaz"] = _QCN.QCNTrigger_pgaz_set
    __swig_getmethods__["pgaz"] = _QCN.QCNTrigger_pgaz_get
    if _newclass:pgaz = _swig_property(_QCN.QCNTrigger_pgaz_get, _QCN.QCNTrigger_pgaz_set)
    __swig_setmethods__["c_cnt"] = _QCN.QCNTrigger_c_cnt_set
    __swig_getmethods__["c_cnt"] = _QCN.QCNTrigger_c_cnt_get
    if _newclass:c_cnt = _swig_property(_QCN.QCNTrigger_c_cnt_get, _QCN.QCNTrigger_c_cnt_set)
    __swig_setmethods__["c_ind"] = _QCN.QCNTrigger_c_ind_set
    __swig_getmethods__["c_ind"] = _QCN.QCNTrigger_c_ind_get
    if _newclass:c_ind = _swig_property(_QCN.QCNTrigger_c_ind_get, _QCN.QCNTrigger_c_ind_set)
    __swig_setmethods__["c_hid"] = _QCN.QCNTrigger_c_hid_set
    __swig_getmethods__["c_hid"] = _QCN.QCNTrigger_c_hid_get
    if _newclass:c_hid = _swig_property(_QCN.QCNTrigger_c_hid_get, _QCN.QCNTrigger_c_hid_set)
    __swig_setmethods__["dis"] = _QCN.QCNTrigger_dis_set
    __swig_getmethods__["dis"] = _QCN.QCNTrigger_dis_get
    if _newclass:dis = _swig_property(_QCN.QCNTrigger_dis_get, _QCN.QCNTrigger_dis_set)
    __swig_setmethods__["pors"] = _QCN.QCNTrigger_pors_set
    __swig_getmethods__["pors"] = _QCN.QCNTrigger_pors_get
    if _newclass:pors = _swig_property(_QCN.QCNTrigger_pors_get, _QCN.QCNTrigger_pors_set)
    __swig_setmethods__["dirty"] = _QCN.QCNTrigger_dirty_set
    __swig_getmethods__["dirty"] = _QCN.QCNTrigger_dirty_get
    if _newclass:dirty = _swig_property(_QCN.QCNTrigger_dirty_get, _QCN.QCNTrigger_dirty_set)
QCNTrigger_swigregister = _QCN.QCNTrigger_swigregister
QCNTrigger_swigregister(QCNTrigger)

class QCNEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCNEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QCNEvent, name)
    __repr__ = _swig_repr
    VERIFICATION_TEST = _QCN.QCNEvent_VERIFICATION_TEST
    DIFFUSION_TEST = _QCN.QCNEvent_DIFFUSION_TEST
    WAVE_CURRENT = _QCN.QCNEvent_WAVE_CURRENT
    DEPTH_INDUCED = _QCN.QCNEvent_DEPTH_INDUCED
    WAVE_GROWTH = _QCN.QCNEvent_WAVE_GROWTH
    def __init__(self): 
        this = _QCN.new_QCNEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QCN.delete_QCNEvent
    __del__ = lambda self : None;
    __swig_setmethods__["eventid"] = _QCN.QCNEvent_eventid_set
    __swig_getmethods__["eventid"] = _QCN.QCNEvent_eventid_get
    if _newclass:eventid = _swig_property(_QCN.QCNEvent_eventid_get, _QCN.QCNEvent_eventid_set)
    __swig_setmethods__["qcn_quakeid"] = _QCN.QCNEvent_qcn_quakeid_set
    __swig_getmethods__["qcn_quakeid"] = _QCN.QCNEvent_qcn_quakeid_get
    if _newclass:qcn_quakeid = _swig_property(_QCN.QCNEvent_qcn_quakeid_get, _QCN.QCNEvent_qcn_quakeid_set)
    __swig_setmethods__["longitude"] = _QCN.QCNEvent_longitude_set
    __swig_getmethods__["longitude"] = _QCN.QCNEvent_longitude_get
    if _newclass:longitude = _swig_property(_QCN.QCNEvent_longitude_get, _QCN.QCNEvent_longitude_set)
    __swig_setmethods__["latitude"] = _QCN.QCNEvent_latitude_set
    __swig_getmethods__["latitude"] = _QCN.QCNEvent_latitude_get
    if _newclass:latitude = _swig_property(_QCN.QCNEvent_latitude_get, _QCN.QCNEvent_latitude_set)
    __swig_setmethods__["depth"] = _QCN.QCNEvent_depth_set
    __swig_getmethods__["depth"] = _QCN.QCNEvent_depth_get
    if _newclass:depth = _swig_property(_QCN.QCNEvent_depth_get, _QCN.QCNEvent_depth_set)
    __swig_setmethods__["e_time"] = _QCN.QCNEvent_e_time_set
    __swig_getmethods__["e_time"] = _QCN.QCNEvent_e_time_get
    if _newclass:e_time = _swig_property(_QCN.QCNEvent_e_time_get, _QCN.QCNEvent_e_time_set)
    __swig_setmethods__["e_t_now"] = _QCN.QCNEvent_e_t_now_set
    __swig_getmethods__["e_t_now"] = _QCN.QCNEvent_e_t_now_get
    if _newclass:e_t_now = _swig_property(_QCN.QCNEvent_e_t_now_get, _QCN.QCNEvent_e_t_now_set)
    __swig_setmethods__["e_r2"] = _QCN.QCNEvent_e_r2_set
    __swig_getmethods__["e_r2"] = _QCN.QCNEvent_e_r2_get
    if _newclass:e_r2 = _swig_property(_QCN.QCNEvent_e_r2_get, _QCN.QCNEvent_e_r2_set)
    __swig_setmethods__["magnitude"] = _QCN.QCNEvent_magnitude_set
    __swig_getmethods__["magnitude"] = _QCN.QCNEvent_magnitude_get
    if _newclass:magnitude = _swig_property(_QCN.QCNEvent_magnitude_get, _QCN.QCNEvent_magnitude_set)
    __swig_setmethods__["e_std"] = _QCN.QCNEvent_e_std_set
    __swig_getmethods__["e_std"] = _QCN.QCNEvent_e_std_get
    if _newclass:e_std = _swig_property(_QCN.QCNEvent_e_std_get, _QCN.QCNEvent_e_std_set)
    __swig_setmethods__["e_cnt"] = _QCN.QCNEvent_e_cnt_set
    __swig_getmethods__["e_cnt"] = _QCN.QCNEvent_e_cnt_get
    if _newclass:e_cnt = _swig_property(_QCN.QCNEvent_e_cnt_get, _QCN.QCNEvent_e_cnt_set)
    __swig_setmethods__["e_msfit"] = _QCN.QCNEvent_e_msfit_set
    __swig_getmethods__["e_msfit"] = _QCN.QCNEvent_e_msfit_get
    if _newclass:e_msfit = _swig_property(_QCN.QCNEvent_e_msfit_get, _QCN.QCNEvent_e_msfit_set)
    __swig_setmethods__["e_t_detect"] = _QCN.QCNEvent_e_t_detect_set
    __swig_getmethods__["e_t_detect"] = _QCN.QCNEvent_e_t_detect_get
    if _newclass:e_t_detect = _swig_property(_QCN.QCNEvent_e_t_detect_get, _QCN.QCNEvent_e_t_detect_set)
    __swig_setmethods__["e_dt_detect"] = _QCN.QCNEvent_e_dt_detect_set
    __swig_getmethods__["e_dt_detect"] = _QCN.QCNEvent_e_dt_detect_get
    if _newclass:e_dt_detect = _swig_property(_QCN.QCNEvent_e_dt_detect_get, _QCN.QCNEvent_e_dt_detect_set)
    __swig_setmethods__["dirty"] = _QCN.QCNEvent_dirty_set
    __swig_getmethods__["dirty"] = _QCN.QCNEvent_dirty_get
    if _newclass:dirty = _swig_property(_QCN.QCNEvent_dirty_get, _QCN.QCNEvent_dirty_set)
QCNEvent_swigregister = _QCN.QCNEvent_swigregister
QCNEvent_swigregister(QCNEvent)

class QCNBounds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCNBounds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QCNBounds, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _QCN.new_QCNBounds(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QCN.delete_QCNBounds
    __del__ = lambda self : None;
    def _print(self): return _QCN.QCNBounds__print(self)
    __swig_setmethods__["xw"] = _QCN.QCNBounds_xw_set
    __swig_getmethods__["xw"] = _QCN.QCNBounds_xw_get
    if _newclass:xw = _swig_property(_QCN.QCNBounds_xw_get, _QCN.QCNBounds_xw_set)
    __swig_setmethods__["yw"] = _QCN.QCNBounds_yw_set
    __swig_getmethods__["yw"] = _QCN.QCNBounds_yw_get
    if _newclass:yw = _swig_property(_QCN.QCNBounds_yw_get, _QCN.QCNBounds_yw_set)
    __swig_setmethods__["zw"] = _QCN.QCNBounds_zw_set
    __swig_getmethods__["zw"] = _QCN.QCNBounds_zw_get
    if _newclass:zw = _swig_property(_QCN.QCNBounds_zw_get, _QCN.QCNBounds_zw_set)
    __swig_setmethods__["x_min"] = _QCN.QCNBounds_x_min_set
    __swig_getmethods__["x_min"] = _QCN.QCNBounds_x_min_get
    if _newclass:x_min = _swig_property(_QCN.QCNBounds_x_min_get, _QCN.QCNBounds_x_min_set)
    __swig_setmethods__["x_max"] = _QCN.QCNBounds_x_max_set
    __swig_getmethods__["x_max"] = _QCN.QCNBounds_x_max_get
    if _newclass:x_max = _swig_property(_QCN.QCNBounds_x_max_get, _QCN.QCNBounds_x_max_set)
    __swig_setmethods__["y_min"] = _QCN.QCNBounds_y_min_set
    __swig_getmethods__["y_min"] = _QCN.QCNBounds_y_min_get
    if _newclass:y_min = _swig_property(_QCN.QCNBounds_y_min_get, _QCN.QCNBounds_y_min_set)
    __swig_setmethods__["y_max"] = _QCN.QCNBounds_y_max_set
    __swig_getmethods__["y_max"] = _QCN.QCNBounds_y_max_get
    if _newclass:y_max = _swig_property(_QCN.QCNBounds_y_max_get, _QCN.QCNBounds_y_max_set)
    __swig_setmethods__["z_min"] = _QCN.QCNBounds_z_min_set
    __swig_getmethods__["z_min"] = _QCN.QCNBounds_z_min_get
    if _newclass:z_min = _swig_property(_QCN.QCNBounds_z_min_get, _QCN.QCNBounds_z_min_set)
    __swig_setmethods__["z_max"] = _QCN.QCNBounds_z_max_set
    __swig_getmethods__["z_max"] = _QCN.QCNBounds_z_max_get
    if _newclass:z_max = _swig_property(_QCN.QCNBounds_z_max_get, _QCN.QCNBounds_z_max_set)
    __swig_setmethods__["dx"] = _QCN.QCNBounds_dx_set
    __swig_getmethods__["dx"] = _QCN.QCNBounds_dx_get
    if _newclass:dx = _swig_property(_QCN.QCNBounds_dx_get, _QCN.QCNBounds_dx_set)
    __swig_setmethods__["dy"] = _QCN.QCNBounds_dy_set
    __swig_getmethods__["dy"] = _QCN.QCNBounds_dy_get
    if _newclass:dy = _swig_property(_QCN.QCNBounds_dy_get, _QCN.QCNBounds_dy_set)
    __swig_setmethods__["dz"] = _QCN.QCNBounds_dz_set
    __swig_getmethods__["dz"] = _QCN.QCNBounds_dz_get
    if _newclass:dz = _swig_property(_QCN.QCNBounds_dz_get, _QCN.QCNBounds_dz_set)
    __swig_setmethods__["nx"] = _QCN.QCNBounds_nx_set
    __swig_getmethods__["nx"] = _QCN.QCNBounds_nx_get
    if _newclass:nx = _swig_property(_QCN.QCNBounds_nx_get, _QCN.QCNBounds_nx_set)
    __swig_setmethods__["ny"] = _QCN.QCNBounds_ny_set
    __swig_getmethods__["ny"] = _QCN.QCNBounds_ny_get
    if _newclass:ny = _swig_property(_QCN.QCNBounds_ny_get, _QCN.QCNBounds_ny_set)
    __swig_setmethods__["nz"] = _QCN.QCNBounds_nz_set
    __swig_getmethods__["nz"] = _QCN.QCNBounds_nz_get
    if _newclass:nz = _swig_property(_QCN.QCNBounds_nz_get, _QCN.QCNBounds_nz_set)
    __swig_setmethods__["lon_factor"] = _QCN.QCNBounds_lon_factor_set
    __swig_getmethods__["lon_factor"] = _QCN.QCNBounds_lon_factor_get
    if _newclass:lon_factor = _swig_property(_QCN.QCNBounds_lon_factor_get, _QCN.QCNBounds_lon_factor_set)
QCNBounds_swigregister = _QCN.QCNBounds_swigregister
QCNBounds_swigregister(QCNBounds)

class QCN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QCN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QCN, name)
    __repr__ = _swig_repr
    OUT_EVENT = _QCN.QCN_OUT_EVENT
    OUT_STATION = _QCN.QCN_OUT_STATION
    OUT_INTENSITY_MAP = _QCN.QCN_OUT_INTENSITY_MAP
    OUT_CONT_TIME = _QCN.QCN_OUT_CONT_TIME
    OUT_CONT_LABEL = _QCN.QCN_OUT_CONT_LABEL
    OUT_TIME_SCATTER = _QCN.QCN_OUT_TIME_SCATTER
    def __init__(self, *args): 
        this = _QCN.new_QCN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _QCN.delete_QCN
    __del__ = lambda self : None;
    def execute(self): return _QCN.QCN_execute(self)
    def detectEvent(self): return _QCN.QCN_detectEvent(self)
    def setSleepInterval(self, *args): return _QCN.QCN_setSleepInterval(self, *args)
    def setTriggerTimeInterval(self, *args): return _QCN.QCN_setTriggerTimeInterval(self, *args)
    def setTriggerDeleteInterval(self, *args): return _QCN.QCN_setTriggerDeleteInterval(self, *args)
    def setEVENT_URL_BASE(self, *args): return _QCN.QCN_setEVENT_URL_BASE(self, *args)
    def setEVENT_PATH(self, *args): return _QCN.QCN_setEVENT_PATH(self, *args)
    def setGMT_MAP_PHP(self, *args): return _QCN.QCN_setGMT_MAP_PHP(self, *args)
    def setEMAIL_PATH(self, *args): return _QCN.QCN_setEMAIL_PATH(self, *args)
    def setEMAIL_DIR(self, *args): return _QCN.QCN_setEMAIL_DIR(self, *args)
    def setEMAIL_INC(self, *args): return _QCN.QCN_setEMAIL_INC(self, *args)
    def addTrigger(self, *args): return _QCN.QCN_addTrigger(self, *args)
    def isEmailOut(self, *args): return _QCN.QCN_isEmailOut(self, *args)
    def isIntensityMapGMTOut(self, *args): return _QCN.QCN_isIntensityMapGMTOut(self, *args)
    def isUpdateQuakeOut(self, *args): return _QCN.QCN_isUpdateQuakeOut(self, *args)
QCN_swigregister = _QCN.QCN_swigregister
QCN_swigregister(QCN)

# This file is compatible with both classic and new-style classes.


